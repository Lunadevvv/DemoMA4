import React, { useState } from 'react';
import { useParams, Link, Navigate } from 'react-router-dom';
import { GoogleGenAI } from '@google/genai';
import { events } from '../data';
import { SpeakerCard } from '../components/SpeakerCard';
// FIX: Import SpeakerModal and Speaker type to add speaker detail functionality.
import { SpeakerModal } from '../components/SpeakerModal';
import { Speaker } from '../types';

// FIX: Define state for interview questions generated by AI.
interface QuestionState {
  question?: string;
  loading: boolean;
  error?: string | null;
}

export const EventDetailPage: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const event = events.find(e => e.id === id);

  // FIX: Add state and handlers for the speaker modal, reusing logic from HomePage.
  const [selectedSpeaker, setSelectedSpeaker] = useState<Speaker | null>(null);
  const [interviewQuestions, setInterviewQuestions] = useState<Record<string, QuestionState>>({});

  const handleOpenModal = (speaker: Speaker) => {
    setSelectedSpeaker(speaker);
  };

  const handleCloseModal = () => {
    setSelectedSpeaker(null);
  };

  const generateInterviewQuestion = async (speaker: Speaker) => {
    if (!speaker || interviewQuestions[speaker.id]?.question) return;

    setInterviewQuestions(prev => ({ ...prev, [speaker.id]: { loading: true } }));

    try {
      if (!process.env.API_KEY) {
        throw new Error("API key is not configured.");
      }
      const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });
      const prompt = `Với vai trò là một nhà báo, hãy đặt một câu hỏi phỏng vấn sâu sắc và gợi mở cho ${speaker.name}, một ${speaker.title}. Tiểu sử của họ là: "${speaker.bio}". Chỉ trả về duy nhất một câu hỏi, không thêm bất kỳ lời dẫn hay ghi chú nào.`;
      
      const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: prompt,
      });

      const question = response.text;
      setInterviewQuestions(prev => ({ ...prev, [speaker.id]: { question, loading: false } }));
    } catch (error) {
      console.error("Error generating interview question:", error);
      setInterviewQuestions(prev => ({ ...prev, [speaker.id]: { error: "Xin lỗi, không thể tạo câu hỏi lúc này.", loading: false } }));
    }
  };

  if (!event) {
    return <Navigate to="/events" replace />;
  }

  return (
    // FIX: Use a React Fragment to wrap the page content and the modal.
    <>
      <div className="bg-white">
        <div className="relative h-96">
          <img src={event.imageUrl} alt={event.title} className="w-full h-full object-cover" />
          <div className="absolute inset-0 bg-black/40 flex items-center justify-center">
            <h1 className="text-5xl font-serif font-bold text-white text-center px-4">{event.title}</h1>
          </div>
        </div>

        <div className="container mx-auto px-6 py-16">
          <div className="max-w-4xl mx-auto">
            <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8 pb-4 border-b border-brand-brown-200">
              <div>
                <p className="text-lg text-brand-brown-700 font-semibold">{event.date}</p>
                <p className="text-md text-brand-brown-600">{event.location}</p>
              </div>
              <Link 
                to={`/register/${event.id}`} 
                className="bg-brand-brown-700 hover:bg-brand-brown-800 text-white font-bold py-3 px-8 rounded-lg text-lg transition-all duration-300 mt-4 md:mt-0"
              >
                Đăng Ký Tham Gia
              </Link>
            </div>

            <article className="prose prose-lg max-w-none text-brand-brown-800">
              <p className="lead">{event.description}</p>
              <p>{event.content}</p>
            </article>

            {event.speakers.length > 0 && (
              <div className="mt-16">
                <h2 className="text-3xl font-serif font-bold text-brand-brown-900 mb-8 text-center">Diễn giả</h2>
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-8 max-w-2xl mx-auto">
                  {event.speakers.map(speaker => (
                    // FIX: Add onClick handler to SpeakerCard to open the speaker details modal.
                    <SpeakerCard key={speaker.id} speaker={speaker} onClick={() => handleOpenModal(speaker)} />
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* FIX: Add the SpeakerModal component to be displayed when a speaker is selected. */}
      <SpeakerModal
        isOpen={!!selectedSpeaker}
        onClose={handleCloseModal}
        speaker={selectedSpeaker}
        questionData={selectedSpeaker ? interviewQuestions[selectedSpeaker.id] : undefined}
        onGenerateQuestion={generateInterviewQuestion}
      />
    </>
  );
};